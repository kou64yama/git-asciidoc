#!/bin/bash

git_opts="-c core.pager= -c color.ui=false"
git_log_opts=""
title="Git Log"
level=1

usage_exit() {
    cat << EOF
Usage: git logdoc [-h] [-t title] [-n max-count] [-l level] [-o outfile]
EOF
    exit 1
}

print_asciidoc() {
    local h=
    for i in $(seq $level); do
        h="${h}="
    done

    local pretty="=$h %s =$h %n%n[horizontal]%nDate::%n  %ad%nAuthor::%n  %an%n%n%b"

    cat << EOF
$h $title $h

[cols=">2,3,9",options="header"]
|====
| Date | Author | Message
$(git $git_opts log $git_log_opts --date=short --pretty="| %ad | %an | <<log-%H, %s>>")
|====
EOF

    echo
    local commits=$(git $git_opts log $git_log_opts --pretty="%H" $@)
    for commit in $commits; do
        cat << EOF
[[log-$commit, $commit]]
$(git $git_opts log -n1 --pretty="$pretty" $commit $@)

[source,diff]
----
$(git $git_opts log -n1 -p --pretty= $commit $@)
----
EOF
    done
}

while getopts ht:n:l:o: OPTNAME; do
    case $OPTNAME in
        h) usage_exit;;
        t) title=$OPTARG;;
        n) git_log_opts="$git_log_opts -n $OPTARG";;
        l) level=$OPTARG;;
        o) outfile=$OPTARG;;
    esac
done
shift $((OPTIND - 1))

if [ ! $level -ge 1 ]; then
    usage_exit >&2
fi

if [ -z "$outfile" ]; then
   print_asciidoc $@
else
   print_asciidoc $@ > $outfile
fi
